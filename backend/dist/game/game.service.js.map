{"version":3,"file":"game.service.js","sourceRoot":"/","sources":["game/game.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Coordinate } from '@common/types/global';\nimport { Injectable } from '@nestjs/common';\nimport { MIN_DIMENSION } from './constants';\nimport { DIRECTION, GameResponse } from './types';\n\n@Injectable()\nexport class GameService {\n    private width: number = 0;\n    private height: number = 0;\n    private snake: Coordinate[] = [];\n    private bait: Coordinate = { x: 0, y: 0 };\n    private direction: DIRECTION = 'right';\n    private gameOver: boolean = true;\n\n    start(width: number, height: number): GameResponse {\n        if (width < MIN_DIMENSION || height < MIN_DIMENSION) {\n            throw new Error('Width and Height must be at least 5');\n        }\n        this.width = width;\n        this.height = height;\n        this.snake = [\n            { x: 2, y: 0 },\n            { x: 1, y: 0 },\n            { x: 0, y: 0 },\n        ];\n        this.direction = 'right';\n        this.gameOver = false;\n        this.bait = this.generateBait();\n        return {\n            snake: this.snake,\n            bait: this.bait,\n            gameOver: false,\n        };\n    }\n\n    private generateBait(): Coordinate {\n        let newBait: Coordinate;\n        do {\n            newBait = {\n                x: Math.floor(Math.random() * this.width),\n                y: Math.floor(Math.random() * this.height),\n            };\n        } while (\n            this.snake.some(\n                (segment) => segment.x === newBait.x && segment.y === newBait.y,\n            )\n        );\n        return newBait;\n    }\n\n    move(direction?: DIRECTION): GameResponse {\n        if (this.gameOver) {\n            return {\n                snake: this.snake,\n                bait: this.bait,\n                gameOver: true,\n                board:\n                    this.snake.length === this.width * this.height\n                        ? 'You win'\n                        : 'You lose',\n            };\n        }\n\n        if (direction) this.setDirection(direction);\n\n        const head = { x: this.snake[0].x, y: this.snake[0].y };\n        switch (this.direction) {\n            case 'up':\n                head.y--;\n                break;\n            case 'down':\n                head.y++;\n                break;\n            case 'left':\n                head.x--;\n                break;\n            case 'right':\n                head.x++;\n                break;\n        }\n\n        if (\n            head.x < 0 ||\n            head.x > this.width - 1 ||\n            head.y < 0 ||\n            head.y > this.height - 1\n        ) {\n            this.gameOver = true;\n            return {\n                snake: this.snake,\n                bait: this.bait,\n                gameOver: true,\n                board: 'You lose',\n            };\n        }\n\n        if (\n            this.snake.some(\n                (segment) => segment.x === head.x && segment.y === head.y,\n            )\n        ) {\n            this.gameOver = true;\n            return {\n                snake: this.snake,\n                bait: this.bait,\n                gameOver: true,\n                board: 'You lose',\n            };\n        }\n\n        this.snake.unshift(head);\n        const ateBait = head.x === this.bait.x && head.y === this.bait.y;\n        if (ateBait) {\n            this.bait = this.generateBait();\n        } else {\n            this.snake.pop();\n        }\n\n        if (this.snake.length === this.width * this.height) {\n            this.gameOver = true;\n            return {\n                snake: this.snake,\n                bait: this.bait,\n                gameOver: true,\n                board: 'You win',\n            };\n        }\n\n        return { snake: this.snake, bait: this.bait, gameOver: false };\n    }\n\n    private setDirection(direction: DIRECTION): void {\n        const opposites: Record<DIRECTION, DIRECTION> = {\n            up: 'down',\n            down: 'up',\n            left: 'right',\n            right: 'left',\n        };\n        if (direction !== opposites[this.direction]) {\n            this.direction = direction;\n        }\n    }\n}\n"]}